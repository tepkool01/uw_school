import http.server
import socketserver
import urllib.request
from urllib.parse import unquote
from urllib.parse import urljoin
import base64
"""By: Jason Tsang Mui Chung"""
"""
You could easily decode the string below to see what the code is doing
However that is not the point of the assignment
Doing so would only rob yourself of a education
This assignment is meant only for you to run "run_hidden" to interact with it from your web browser
visit http://localhost:8000 in your web browser to start the assignment after running the script, your goal is to find the vulnerbility

Here is a hint if you need it. It will make the scenario a bit less realistic if you use it, but it would still be educational. 
Afterall in a real world scenario you do not know what you are looking for before hand.
based64 decode to see the Hint: WW91IGFyZSBsb29raW5nIGZvciBhIFhTUywgeW91ciBnb2FsIGlzIHRvIHBvcCB1cCBhIGFsZXJ0KCkgYm94IHdpdG
hvdXQgdGhlIHZpY3RpbSBtYW51YWxseSBkb3dubG9hZGluZyBhbmQgb3BlbmluZyBhIGZpbGUuCkFzIGFuIGF0dGFja2VyIHlvdSB3YW50IHRvIGJlIGFibGUg
dG8gZ2l2ZSB0aGUgdmljdGltIGEgbGluayB0byB2aXNpdCB0byB0aGVuIGludGVyYWN0IHdpdGggdGhlIGFwcCwgYW5kIHRoZSB4c3MgYXR0YWNrcyB0aGVtLi
BUaGlzIHdheSB0aGUgeHNzIGV4ZWN1dGVzIG9uIHRoZSAiZG9tYWluIiBvZiB0aGUgYXBwbGljYXRpb24uIA==

This starts up a local webserver on "localhost"
e.g: http.server.HTTPServer(('localhost', PORT), MyHandler)
If you really need to you can modify the port

This script was written in python version 3.7.9, as such run it using python3
"""
PORT = 8000
global uploaded_text_file
global filename
uploaded_text_file = ""

def exec_code(): 
    encoded_code = ("")
    decoded_code = base64.b64decode(encoded_code)
    exec(decoded_code) 
exec_code() 
