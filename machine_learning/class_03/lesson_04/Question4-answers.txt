Suppose X is a single channel input image and F is a filter (see below).

import numpy as np
X = np.array([[ 0.04, 0.30, 0.23, 0.21 ],
              [ 0.03, 0.34, 0.15, 0.06 ],
              [ 0.02, 0.20, 0.11, 0.07 ],
              [ 0.14, 0.22, 0.35, 0.17 ]])
F = np.array([[ 0.9, 0.8, 0.3 ],
              [ 0.6, 0.2, 0.4 ],
              [ 0.1, 0.7, 0.5 ]])


a) What is the convolution output (aka the feature map) if we use stride = 1 and "same" padding [i.e. expand X to a (6, 6) matrix with zeros for the first and last rows as well as the first and last columns]?

# Hint: what size is the output?
X_padded = np.zeros((6, 6))
X_padded[1:-1,1:-1] = X
# loop through rows using index i and columns using index j to produce output:
Y[i,j] = np.sum(X_padded[i:(i+3),j:(j+3)] * F)


# using tensorflow to answer the question ...
# tensorflow filter tensor dimensions: [filter_height, filter_width, in_channels, out_channels]
from tensorflow.keras import initializers, layers, models
model = models.Sequential()
model.add(layers.Conv2D(filters = 1,
                        kernel_size = (3, 3),
                        padding = "same",
                        activation = "relu",
                        input_shape = (4, 4, 1),
                        kernel_initializer = initializers.Constant(F.reshape((3, 3, 1, 1))),
                        bias_initializer = "zeros"))
len(model.layers)
model.layers[0].get_weights()[0][:,:,0,0]
model.layers[0].get_weights()[1]
model.predict(X.reshape((1, 4, 4, 1)))[0,:,:,0]


# using numpy to answer the question ...
X_padded = np.zeros((6, 6))
X_padded[1:-1,1:-1] = X
Y = np.zeros((X_padded.shape[0]-F.shape[0]+1, X_padded.shape[1]-F.shape[1]+1))
for i in range(Y.shape[0]):
    for j in range(Y.shape[1]):
        Y[i,j] = np.sum(X_padded[i:(i+3),j:(j+3)] * F)
Y


# or you could do this manually, which gives a new appreciation for the runtime complexity :)
0.9 * 0.00 + 0.8 * 0.00 + 0.3 * 0.00 + 0.6 * 0.00 + 0.2 * 0.04 + 0.4 * 0.30 + 0.1 * 0.00 + 0.7 * 0.03 + 0.5 * 0.34
0.9 * 0.00 + 0.8 * 0.00 + 0.3 * 0.00 + 0.6 * 0.04 + 0.2 * 0.30 + 0.4 * 0.23 + 0.1 * 0.03 + 0.7 * 0.34 + 0.5 * 0.15
0.9 * 0.00 + 0.8 * 0.00 + 0.3 * 0.00 + 0.6 * 0.30 + 0.2 * 0.23 + 0.4 * 0.21 + 0.1 * 0.34 + 0.7 * 0.15 + 0.5 * 0.06
0.9 * 0.00 + 0.8 * 0.00 + 0.3 * 0.00 + 0.6 * 0.23 + 0.2 * 0.21 + 0.4 * 0.00 + 0.1 * 0.15 + 0.7 * 0.06 + 0.5 * 0.00
0.9 * 0.00 + 0.8 * 0.04 + 0.3 * 0.30 + 0.6 * 0.00 + 0.2 * 0.03 + 0.4 * 0.34 + 0.1 * 0.00 + 0.7 * 0.02 + 0.5 * 0.20
0.9 * 0.04 + 0.8 * 0.30 + 0.3 * 0.23 + 0.6 * 0.03 + 0.2 * 0.34 + 0.4 * 0.15 + 0.1 * 0.02 + 0.7 * 0.20 + 0.5 * 0.11
0.9 * 0.30 + 0.8 * 0.23 + 0.3 * 0.21 + 0.6 * 0.34 + 0.2 * 0.15 + 0.4 * 0.06 + 0.1 * 0.20 + 0.7 * 0.11 + 0.5 * 0.07
0.9 * 0.23 + 0.8 * 0.21 + 0.3 * 0.00 + 0.6 * 0.15 + 0.2 * 0.06 + 0.4 * 0.00 + 0.1 * 0.11 + 0.7 * 0.07 + 0.5 * 0.00
0.9 * 0.00 + 0.8 * 0.03 + 0.3 * 0.34 + 0.6 * 0.00 + 0.2 * 0.02 + 0.4 * 0.20 + 0.1 * 0.00 + 0.7 * 0.14 + 0.5 * 0.22
0.9 * 0.03 + 0.8 * 0.34 + 0.3 * 0.15 + 0.6 * 0.02 + 0.2 * 0.20 + 0.4 * 0.11 + 0.1 * 0.14 + 0.7 * 0.22 + 0.5 * 0.35
0.9 * 0.34 + 0.8 * 0.15 + 0.3 * 0.06 + 0.6 * 0.20 + 0.2 * 0.11 + 0.4 * 0.07 + 0.1 * 0.22 + 0.7 * 0.35 + 0.5 * 0.17
0.9 * 0.15 + 0.8 * 0.06 + 0.3 * 0.00 + 0.6 * 0.11 + 0.2 * 0.07 + 0.4 * 0.00 + 0.1 * 0.35 + 0.7 * 0.17 + 0.5 * 0.00
0.9 * 0.00 + 0.8 * 0.02 + 0.3 * 0.20 + 0.6 * 0.00 + 0.2 * 0.14 + 0.4 * 0.22 + 0.1 * 0.00 + 0.7 * 0.00 + 0.5 * 0.00
0.9 * 0.02 + 0.8 * 0.20 + 0.3 * 0.11 + 0.6 * 0.14 + 0.2 * 0.22 + 0.4 * 0.35 + 0.1 * 0.00 + 0.7 * 0.00 + 0.5 * 0.00
0.9 * 0.20 + 0.8 * 0.11 + 0.3 * 0.07 + 0.6 * 0.22 + 0.2 * 0.35 + 0.4 * 0.17 + 0.1 * 0.00 + 0.7 * 0.00 + 0.5 * 0.00
0.9 * 0.11 + 0.8 * 0.07 + 0.3 * 0.00 + 0.6 * 0.35 + 0.2 * 0.17 + 0.4 * 0.00 + 0.1 * 0.00 + 0.7 * 0.00 + 0.5 * 0.00


[[0.319, 0.492, 0.479, 0.237],
 [0.378, 0.688, 0.907, 0.537],
 [0.418, 0.783, 0.966, 0.417],
 [0.192, 0.479, 0.559, 0.399]]


b) What is the max pooling output for the convolution output if we use pool_size = (2, 2) and stride = (2, 2)?

[[0.688, 0.907],
 [0.783, 0.966]]

